// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: estafette/ci/manifest/v1/estafette_event.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Estafette.Ci.Manifest.V1 {

  /// <summary>Holder for reflection information generated from estafette/ci/manifest/v1/estafette_event.proto</summary>
  public static partial class EstafetteEventReflection {

    #region Descriptor
    /// <summary>File descriptor for estafette/ci/manifest/v1/estafette_event.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EstafetteEventReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci5lc3RhZmV0dGUvY2kvbWFuaWZlc3QvdjEvZXN0YWZldHRlX2V2ZW50LnBy",
            "b3RvEhhlc3RhZmV0dGUuY2kubWFuaWZlc3QudjEaM2VzdGFmZXR0ZS9jaS9t",
            "YW5pZmVzdC92MS9lc3RhZmV0dGVfY3Jvbl9ldmVudC5wcm90bxo1ZXN0YWZl",
            "dHRlL2NpL21hbmlmZXN0L3YxL2VzdGFmZXR0ZV9kb2NrZXJfZXZlbnQucHJv",
            "dG8aMmVzdGFmZXR0ZS9jaS9tYW5pZmVzdC92MS9lc3RhZmV0dGVfZ2l0X2V2",
            "ZW50LnByb3RvGjVlc3RhZmV0dGUvY2kvbWFuaWZlc3QvdjEvZXN0YWZldHRl",
            "X21hbnVhbF9ldmVudC5wcm90bxo3ZXN0YWZldHRlL2NpL21hbmlmZXN0L3Yx",
            "L2VzdGFmZXR0ZV9waXBlbGluZV9ldmVudC5wcm90bxo2ZXN0YWZldHRlL2Np",
            "L21hbmlmZXN0L3YxL2VzdGFmZXR0ZV9wdWJfc3ViX2V2ZW50LnByb3RvGjZl",
            "c3RhZmV0dGUvY2kvbWFuaWZlc3QvdjEvZXN0YWZldHRlX3JlbGVhc2VfZXZl",
            "bnQucHJvdG8izQMKDkVzdGFmZXR0ZUV2ZW50EkIKCHBpcGVsaW5lGAEgASgL",
            "MjAuZXN0YWZldHRlLmNpLm1hbmlmZXN0LnYxLkVzdGFmZXR0ZVBpcGVsaW5l",
            "RXZlbnQSQAoHcmVsZWFzZRgCIAEoCzIvLmVzdGFmZXR0ZS5jaS5tYW5pZmVz",
            "dC52MS5Fc3RhZmV0dGVSZWxlYXNlRXZlbnQSOAoDZ2l0GAMgASgLMisuZXN0",
            "YWZldHRlLmNpLm1hbmlmZXN0LnYxLkVzdGFmZXR0ZUdpdEV2ZW50Ej4KBmRv",
            "Y2tlchgEIAEoCzIuLmVzdGFmZXR0ZS5jaS5tYW5pZmVzdC52MS5Fc3RhZmV0",
            "dGVEb2NrZXJFdmVudBI6CgRjcm9uGAUgASgLMiwuZXN0YWZldHRlLmNpLm1h",
            "bmlmZXN0LnYxLkVzdGFmZXR0ZUNyb25FdmVudBI/CgdwdWJfc3ViGAYgASgL",
            "Mi4uZXN0YWZldHRlLmNpLm1hbmlmZXN0LnYxLkVzdGFmZXR0ZVB1YlN1YkV2",
            "ZW50Ej4KBm1hbnVhbBgHIAEoCzIuLmVzdGFmZXR0ZS5jaS5tYW5pZmVzdC52",
            "MS5Fc3RhZmV0dGVNYW51YWxFdmVudEJ4Chxjb20uZXN0YWZldHRlLmNpLm1h",
            "bmlmZXN0LnYxUAFaO2dpdGh1Yi5jb20vZXN0YWZldHRlL2VzdGFmZXR0ZS1j",
            "aS1wcm90b3MtZ29sYW5nL21hbmlmZXN0X3YxqgIYRXN0YWZldHRlLkNpLk1h",
            "bmlmZXN0LlYxYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Estafette.Ci.Manifest.V1.EstafetteCronEventReflection.Descriptor, global::Estafette.Ci.Manifest.V1.EstafetteDockerEventReflection.Descriptor, global::Estafette.Ci.Manifest.V1.EstafetteGitEventReflection.Descriptor, global::Estafette.Ci.Manifest.V1.EstafetteManualEventReflection.Descriptor, global::Estafette.Ci.Manifest.V1.EstafettePipelineEventReflection.Descriptor, global::Estafette.Ci.Manifest.V1.EstafettePubSubEventReflection.Descriptor, global::Estafette.Ci.Manifest.V1.EstafetteReleaseEventReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Estafette.Ci.Manifest.V1.EstafetteEvent), global::Estafette.Ci.Manifest.V1.EstafetteEvent.Parser, new[]{ "Pipeline", "Release", "Git", "Docker", "Cron", "PubSub", "Manual" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class EstafetteEvent : pb::IMessage<EstafetteEvent> {
    private static readonly pb::MessageParser<EstafetteEvent> _parser = new pb::MessageParser<EstafetteEvent>(() => new EstafetteEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EstafetteEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Estafette.Ci.Manifest.V1.EstafetteEventReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EstafetteEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EstafetteEvent(EstafetteEvent other) : this() {
      pipeline_ = other.pipeline_ != null ? other.pipeline_.Clone() : null;
      release_ = other.release_ != null ? other.release_.Clone() : null;
      git_ = other.git_ != null ? other.git_.Clone() : null;
      docker_ = other.docker_ != null ? other.docker_.Clone() : null;
      cron_ = other.cron_ != null ? other.cron_.Clone() : null;
      pubSub_ = other.pubSub_ != null ? other.pubSub_.Clone() : null;
      manual_ = other.manual_ != null ? other.manual_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EstafetteEvent Clone() {
      return new EstafetteEvent(this);
    }

    /// <summary>Field number for the "pipeline" field.</summary>
    public const int PipelineFieldNumber = 1;
    private global::Estafette.Ci.Manifest.V1.EstafettePipelineEvent pipeline_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Estafette.Ci.Manifest.V1.EstafettePipelineEvent Pipeline {
      get { return pipeline_; }
      set {
        pipeline_ = value;
      }
    }

    /// <summary>Field number for the "release" field.</summary>
    public const int ReleaseFieldNumber = 2;
    private global::Estafette.Ci.Manifest.V1.EstafetteReleaseEvent release_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Estafette.Ci.Manifest.V1.EstafetteReleaseEvent Release {
      get { return release_; }
      set {
        release_ = value;
      }
    }

    /// <summary>Field number for the "git" field.</summary>
    public const int GitFieldNumber = 3;
    private global::Estafette.Ci.Manifest.V1.EstafetteGitEvent git_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Estafette.Ci.Manifest.V1.EstafetteGitEvent Git {
      get { return git_; }
      set {
        git_ = value;
      }
    }

    /// <summary>Field number for the "docker" field.</summary>
    public const int DockerFieldNumber = 4;
    private global::Estafette.Ci.Manifest.V1.EstafetteDockerEvent docker_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Estafette.Ci.Manifest.V1.EstafetteDockerEvent Docker {
      get { return docker_; }
      set {
        docker_ = value;
      }
    }

    /// <summary>Field number for the "cron" field.</summary>
    public const int CronFieldNumber = 5;
    private global::Estafette.Ci.Manifest.V1.EstafetteCronEvent cron_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Estafette.Ci.Manifest.V1.EstafetteCronEvent Cron {
      get { return cron_; }
      set {
        cron_ = value;
      }
    }

    /// <summary>Field number for the "pub_sub" field.</summary>
    public const int PubSubFieldNumber = 6;
    private global::Estafette.Ci.Manifest.V1.EstafettePubSubEvent pubSub_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Estafette.Ci.Manifest.V1.EstafettePubSubEvent PubSub {
      get { return pubSub_; }
      set {
        pubSub_ = value;
      }
    }

    /// <summary>Field number for the "manual" field.</summary>
    public const int ManualFieldNumber = 7;
    private global::Estafette.Ci.Manifest.V1.EstafetteManualEvent manual_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Estafette.Ci.Manifest.V1.EstafetteManualEvent Manual {
      get { return manual_; }
      set {
        manual_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EstafetteEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EstafetteEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pipeline, other.Pipeline)) return false;
      if (!object.Equals(Release, other.Release)) return false;
      if (!object.Equals(Git, other.Git)) return false;
      if (!object.Equals(Docker, other.Docker)) return false;
      if (!object.Equals(Cron, other.Cron)) return false;
      if (!object.Equals(PubSub, other.PubSub)) return false;
      if (!object.Equals(Manual, other.Manual)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pipeline_ != null) hash ^= Pipeline.GetHashCode();
      if (release_ != null) hash ^= Release.GetHashCode();
      if (git_ != null) hash ^= Git.GetHashCode();
      if (docker_ != null) hash ^= Docker.GetHashCode();
      if (cron_ != null) hash ^= Cron.GetHashCode();
      if (pubSub_ != null) hash ^= PubSub.GetHashCode();
      if (manual_ != null) hash ^= Manual.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pipeline_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pipeline);
      }
      if (release_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Release);
      }
      if (git_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Git);
      }
      if (docker_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Docker);
      }
      if (cron_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Cron);
      }
      if (pubSub_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(PubSub);
      }
      if (manual_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Manual);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pipeline_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pipeline);
      }
      if (release_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Release);
      }
      if (git_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Git);
      }
      if (docker_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Docker);
      }
      if (cron_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cron);
      }
      if (pubSub_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PubSub);
      }
      if (manual_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Manual);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EstafetteEvent other) {
      if (other == null) {
        return;
      }
      if (other.pipeline_ != null) {
        if (pipeline_ == null) {
          Pipeline = new global::Estafette.Ci.Manifest.V1.EstafettePipelineEvent();
        }
        Pipeline.MergeFrom(other.Pipeline);
      }
      if (other.release_ != null) {
        if (release_ == null) {
          Release = new global::Estafette.Ci.Manifest.V1.EstafetteReleaseEvent();
        }
        Release.MergeFrom(other.Release);
      }
      if (other.git_ != null) {
        if (git_ == null) {
          Git = new global::Estafette.Ci.Manifest.V1.EstafetteGitEvent();
        }
        Git.MergeFrom(other.Git);
      }
      if (other.docker_ != null) {
        if (docker_ == null) {
          Docker = new global::Estafette.Ci.Manifest.V1.EstafetteDockerEvent();
        }
        Docker.MergeFrom(other.Docker);
      }
      if (other.cron_ != null) {
        if (cron_ == null) {
          Cron = new global::Estafette.Ci.Manifest.V1.EstafetteCronEvent();
        }
        Cron.MergeFrom(other.Cron);
      }
      if (other.pubSub_ != null) {
        if (pubSub_ == null) {
          PubSub = new global::Estafette.Ci.Manifest.V1.EstafettePubSubEvent();
        }
        PubSub.MergeFrom(other.PubSub);
      }
      if (other.manual_ != null) {
        if (manual_ == null) {
          Manual = new global::Estafette.Ci.Manifest.V1.EstafetteManualEvent();
        }
        Manual.MergeFrom(other.Manual);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (pipeline_ == null) {
              Pipeline = new global::Estafette.Ci.Manifest.V1.EstafettePipelineEvent();
            }
            input.ReadMessage(Pipeline);
            break;
          }
          case 18: {
            if (release_ == null) {
              Release = new global::Estafette.Ci.Manifest.V1.EstafetteReleaseEvent();
            }
            input.ReadMessage(Release);
            break;
          }
          case 26: {
            if (git_ == null) {
              Git = new global::Estafette.Ci.Manifest.V1.EstafetteGitEvent();
            }
            input.ReadMessage(Git);
            break;
          }
          case 34: {
            if (docker_ == null) {
              Docker = new global::Estafette.Ci.Manifest.V1.EstafetteDockerEvent();
            }
            input.ReadMessage(Docker);
            break;
          }
          case 42: {
            if (cron_ == null) {
              Cron = new global::Estafette.Ci.Manifest.V1.EstafetteCronEvent();
            }
            input.ReadMessage(Cron);
            break;
          }
          case 50: {
            if (pubSub_ == null) {
              PubSub = new global::Estafette.Ci.Manifest.V1.EstafettePubSubEvent();
            }
            input.ReadMessage(PubSub);
            break;
          }
          case 58: {
            if (manual_ == null) {
              Manual = new global::Estafette.Ci.Manifest.V1.EstafetteManualEvent();
            }
            input.ReadMessage(Manual);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
